1.Timer实现定时任务
  timer是最简单的一种实现任务调度的方式。使用Timer实现任务调度的核心类是Timer和TimerTask。其中Timer负责设定TimerTask的起始与间隔执行时间。使用者只需要创建一个TimerTask的继承类，实现自己的run方法，然后将其丢给Timer去执行即可。
  Timer的设计核心是一个TaskList和一个TaskThread。Timer 将接收到的任务丢到自己的 TaskList中，TaskList 按照 Task 的最初执行时间进行排序。TimerThread 在创建 Timer 时会启动成为一个守护线程。这个线程会轮询所有任务，找到一个最近要执行的任务，然后休眠，当到达最近要执行任务的开始时间点，TimerThread 被唤醒并执行该任务。之后 TimerThread 更新最近一个要执行的任务，继续休眠。
  Timer的优点在于简单易用，但由于所有任务都是由同一个线程来调度，因此所有任务都是串行执行的，同一时间只能有一个任务在执行，前一个任务的延迟或异常都将会影响到之后的任务。
2.ScheduledExecutor
  (1).鉴于Timer的上述缺陷，Java 5 推出了基于线程池设计的 ScheduledExecutor。其设计思想是，每一个被调度的任务都会由线程池中一个线程去执行，因此任务是并发执行的，相互之间不会受到干扰。需要注意的是，只有当任务的执行时间到来时，ScheduedExecutor 才会真正启动一个线程，其余时间 ScheduledExecutor 都是在轮询任务的状态
      ScheduledExecutorService 中两种最常用的调度方法 ScheduleAtFixedRate和 ScheduleWithFixedDelay。ScheduleAtFixedRate 每次执行时间为上一次任务开始起向后推一个时间间隔，即每次执行时间为 :initialDelay, initialDelay+period, initialDelay+2*period, …；ScheduleWithFixedDelay 每次执行时间为上一次任务结束起向后推一个时间间隔，即每次执行时间为：initialDelay, initialDelay+executeTime+delay, initialDelay+2*executeTime+2*delay。由此可见，ScheduleAtFixedRate 是基于固定时间间隔进行任务调度，ScheduleWithFixedDelay 取决于每次任务执行的时间长短，是基于不固定时间间隔进行任务调度
  (2).Timer 和 ScheduledExecutor 都仅能提供基于开始时间与重复间隔的任务调度，不能胜任更加复杂的调度需求。比如，设置每星期四的 17:20:00 执行任务。该功能使用 Timer 和 ScheduledExecutor 都不能直接实现，但我们可以借助 Calendar 间接实现该功能
      下面先解释一下calendar的一些设计思想。Calendar有以下几种唯一标识一个日期的组合方式：
      YEAR + MONTH + DAY_OF_MONTH 
      YEAR + MONTH + WEEK_OF_MONTH + DAY_OF_WEEK 
      YEAR + MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK 
      YEAR + DAY_OF_YEAR 
      YEAR + DAY_OF_WEEK + WEEK_OF_YEAR
      上述组合分别加上 HOUR_OF_DAY + MINUTE + SECOND 即为一个完整的时间标识。
3.Quartz实现定时任务
  从上面看来，结合Calendar实现复杂的调度需求还是比较麻烦的，这就需要一个更加完善的任务调度框架来解决这些复杂的调度问题，Quartz 可以满足更多更复杂的调度需求
  Quartz 设计的核心类包括 Scheduler, Job 以及 Trigger。其中，Job 负责定义需要执行的任务，Trigger 负责设置调度策略，Scheduler 将二者组装在一起，并触发任务开始执行